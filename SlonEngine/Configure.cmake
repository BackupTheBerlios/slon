# standart
INCLUDE (StandartIncludes)
INCLUDE (FindNecessaryLibraries.cmake)
INCLUDE (OptionDependentOnPackage)

# options
IF (NOT SLON_ENGINE_CONFIGURE_INTRUSIVE)
	OPTION (SLON_ENGINE_BUILD_EXAMPLES "Set ON to build library examples" OFF)
	MESSAGE ( "Build examples: " ${SLON_ENGINE_BUILD_EXAMPLES} )

	OPTION (SLON_ENGINE_BUILD_TESTS "Set ON to build library tests" OFF)
	MESSAGE ( "Build tests: " ${SLON_ENGINE_BUILD_TESTS} )

	OPTION (INSTALL_EXAMPLES "Set to ON to install examples" OFF)
	MESSAGE ("Install examples: " ${INSTALL_EXAMPLES})
    
    OPTION_DEPENDENT_ON_PACKAGE ( SLON_ENGINE_BUILD_DOCUMENTATION "Set ON to build doxygen reference documentation" DOXYGEN_FOUND )
    MESSAGE ( "Build documentation: " ${BUILD_DOCUMENTATION} )
ENDIF (NOT SLON_ENGINE_CONFIGURE_INTRUSIVE)

# check settings
IF (NOT BUILD_EXAMPLES AND INSTALL_EXAMPLES)
	MESSAGE (FATAL_ERROR "You must check in BUILD_EXAMPLES option in order to install them.") 
ENDIF (NOT BUILD_EXAMPLES AND INSTALL_EXAMPLES)

# sse optimization
OPTION (SLON_ENGINE_USE_SSE "Set to ON to enable sse optimizations" ON)
MESSAGE ("Use SSE: " ${SLON_ENGINE_USE_SSE})

OPTION (SLON_ENGINE_USE_DOUBLE_PRECISION_PHYSICS "Set to ON to use double precision physics" OFF)
MESSAGE ("Use double precision physics: " ${SLON_ENGINE_USE_DOUBLE_PRECISION_PHYSICS})

OPTION_DEPENDENT_ON_PACKAGE ( SLON_ENGINE_USE_BULLET "Set ON to enable bullet physics support" BULLET_FOUND )
MESSAGE ( "Using bullet physics: " ${SLON_ENGINE_USE_BULLET} )

OPTION_DEPENDENT_ON_PACKAGE ( SLON_ENGINE_USE_GNUPLOT "Set ON to enable gnuplot for drawing graphics" GNUPLOT_FOUND )
MESSAGE ( "Use gnuplot: " ${SLON_ENGINE_USE_GNUPLOT} )

# directory setup
LINK_DIRECTORIES ( ${PROJECT_BINARY_DIR}/lib )

IF (SLON_ENGINE_USE_BULLET)
	INCLUDE_DIRECTORIES ( ${Bullet_INCLUDE_DIR} )
    IF (SLON_ENGINE_USE_DOUBLE_PRECISION_PHYSICS)
        ADD_DEFINITIONS(-DBT_USE_DOUBLE_PRECISION)
    ENDIF (SLON_ENGINE_USE_DOUBLE_PRECISION_PHYSICS)
ENDIF (SLON_ENGINE_USE_BULLET)

# physics setup
IF (SLON_ENGINE_USE_BULLET)
	SET (SLON_ENGINE_USE_PHYSICS ON) 
ENDIF (SLON_ENGINE_USE_BULLET)

# check for sse
IF (SLON_ENGINE_USE_SSE)
    SET (SSE_VERSION 3) 

    # determine sse version
    IF (${SSE_VERSION} GREATER 3)
        SET (SLON_ENGINE_USE_SSE4 ON)
    ENDIF (${SSE_VERSION} GREATER 3)
    IF (${SSE_VERSION} GREATER 2)
        SET (SLON_ENGINE_USE_SSE3 ON)
    ENDIF (${SSE_VERSION} GREATER 2)
    IF (${SSE_VERSION} GREATER 1)
        SET (SLON_ENGINE_USE_SSE2 ON)
    ENDIF (${SSE_VERSION} GREATER 1)

    MESSAGE ("Used sse version: " ${SSE_VERSION})

ENDIF (SLON_ENGINE_USE_SSE)

# config
CONFIGURE_FILE (${PROJECT_SOURCE_DIR}/slon/Config.h.cmake ${PROJECT_SOURCE_DIR}/slon/Config.h)

# enable sse for g++
IF (CMAKE_COMPILER_IS_GNUCC AND SLON_ENGINE_USE_SSE)
	ADD_DEFINITIONS (-mmmx)
	ADD_DEFINITIONS (-msse)
	ADD_DEFINITIONS (-mfpmath=sse)

    IF (SLON_ENGINE_USE_SSE2)
	    ADD_DEFINITIONS (-msse2)
    ENDIF (SLON_ENGINE_USE_SSE2)

    IF (SLON_ENGINE_USE_SSE3)
	    ADD_DEFINITIONS (-msse3)
    ENDIF (SLON_ENGINE_USE_SSE3)

    IF (SLON_ENGINE_USE_SSE4)
	    ADD_DEFINITIONS (-msse4)
    ENDIF (SLON_ENGINE_USE_SSE4)
ENDIF (CMAKE_COMPILER_IS_GNUCC AND SLON_ENGINE_USE_SSE)

IF (SIMPLE_GL_CONFIGURE_INTRUSIVE)
	SET( SimpleGL_INCLUDE_DIR ${SIMPLE_GL_PATH})
ENDIF (SIMPLE_GL_CONFIGURE_INTRUSIVE)

IF (XMLPP_CONFIGURE_INTRUSIVE)
	SET( XML++_INCLUDE_DIR ${XMLPP_PATH})
ENDIF (XMLPP_CONFIGURE_INTRUSIVE)

INCLUDE_DIRECTORIES ( 
	${PROJECT_SOURCE_DIR}/slon
	${Boost_INCLUDE_DIR}
	${SimpleGL_INCLUDE_DIR}
	${XML++_INCLUDE_DIR}
	${SDL_INCLUDE_DIR}
	${OPENGL_INCLUDE_DIR}
)
